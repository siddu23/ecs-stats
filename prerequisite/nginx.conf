# run as which user
user www-data;

# process id
pid /run/nginx.pid;

# hosted on ec2; m4.large
worker_processes 1; 

# each worker_connection needs 2 filehandlers as we are proxying
worker_rlimit_nofile 65535;

# used for multi-threaded read and send operations; works in correlation with aio directive
thread_pool app_io_pool threads=1024;

events {
	# allows below connections per worker; allowed connection are (worker_processes * worker_connections)
	worker_connections 2048;

	# allows worker to accept as many connections as possible
	multi_accept on;
}

http {
    # allowed sites info
	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;

	# logging
    log_format aformat '[nginx] [$time_local] $status $request_time $upstream_response_time "$request"';
    access_log syslog:server=unix:/dev/log aformat;
    error_log syslog:server=unix:/dev/log;

	# http keepalive
	keepalive_timeout 30;

	# allow the server to close the connection after a client stops responding
    reset_timedout_connection on;

	# allows to attempt to send its HTTP response head in one packet
	tcp_nopush on; 

	# don't buffer data-sends 
	tcp_nodelay on;

	# copies data between one FD and other from within the kernel
	sendfile on;

	# compression. reduces the amount of data that needs to be transferred over the network
	gzip on;
	gzip_disable "msie6";
	gzip_proxied any;

    # as its a proxy pass
	proxy_connect_timeout 600;
	proxy_send_timeout 600;
	proxy_read_timeout 600;
	send_timeout 600;

	# ssl details
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	# hash cache
	types_hash_max_size 2048;

	# default type
	default_type application/json;

	# allows using of asynchronous i/o
    aio threads=app_io_pool;
}

